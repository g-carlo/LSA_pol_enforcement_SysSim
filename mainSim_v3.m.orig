%%% SON SIMULATOR: main simulation file
%
%   Author: Carlo Galiotto
%
%   Date:   July 2010, last modification: March, 2015
%
%   Description: this file is the main simulation file, where the main
%   variables and the simulation loop are defined.
%

%% initialization of cells

tic;

% % figure
% % hold on

if conf.general.SLS_activated
    
    [cls,conf] = initializeCells_v2(conf,cellTypeArray,type2TypeArray,...
        carrierTypeArray, [carrierArray.numOfAvailablePRB]);
    
else
    
    [cls,conf] = initializeCells_noSLS(conf,cellTypeArray,type2TypeArray,...
        carrierTypeArray, [carrierArray.numOfAvailablePRB]);
    
end

%     if varSaveVars  == 1
%         varcellpos = [cls.pos];
%         varcellpos_x = [varcellpos.x];
%         varcellpos_y = [varcellpos.y];
%         save(varfnamevars,'varcellpos_x','-append');
%         save(varfnamevars,'varcellpos_y','-append');
%     end
%   
[carrierArray, cellsPerCarrier] = setCellsPerCarrier_v1(...
    carrierArray, [cls.complexPosition], ...
    conf.general.randomAssigCellsPerCarrier, conf.general.cellRatio,[cls.networkOP_ID]);

%load cells' power from file

varLoadTxFromFile = sum([carrierArray(:).loadPtxData]);
if varLoadTxFromFile>0
    filename = strcat(conf.storage.inputFolderPath,'cellsPower.dat');
    if exist(filename, 'file')
        fid = fopen(filename);
        A=fscanf(fid, '%d %f\n', [2 inf]);
        fclose(fid);

        tmp_err=0;

        counter=0;
        for ii=1:numOfCarriers
            if carrierArray(ii).loadPtxData==1
                for j=1:length(carrierArray(ii).cellsInCarrier)
                    counter=counter+1;
                    if A(1,counter)~=ii
                        tmp_err=1;
                        error('Structure of inputData/cellsPtx.dat is not OK!');
                    end
                    cellId = carrierArray(ii).cellsInCarrier(j);
                    cls(cellId).raVars(ii).maxTxPw = A(2,counter);                    
                end
            end
        end
    end
end

tfin = toc;
disp(strcat({'Initialize cells: '},num2str(tfin),{' s'}));


%% initialize event handler

% generate database and incuments 
paramVar.deployment = conf.deployment;
paramVar.database = conf.database;
database_var = LSA_dataBase_Cls (conf.database.numOfLSAChannels,conf.deployment.numOfIncumbents,paramVar);   
paramVar.deployment  	= conf.deployment;
paramVar.database       = conf.database;
paramVar.incumbent      = conf.incumbent;
database_var            = LSA_dataBase_Cls (conf.database.numOfLSAChannels,conf.deployment.numOfIncumbents,paramVar);   
            
areaLimVector = [conf.deployment.incumbentEastBound conf.deployment.incumbentWestBound conf.deployment.incumbentSouthBound conf.deployment.incumbentNorthBound];

%% initialize LSA controller

paramLSAcontroller.deployment       = conf.deployment;
paramLSAcontroller.incumbent        = conf.incumbent;
paramLSAcontroller.PHY              = conf.PHY;
paramLSAcontroller.channel          = conf.channel;
paramLSAcontroller.L1_scheduling    = conf.L1_scheduling;
paramLSAcontroller.database         = conf.database;

LSA_controller = LSA_controller_Cls(conf.database.numOfLSAChannels,conf.deployment.numOfIncumbents,conf.deployment.numOfNetworkOperators,paramLSAcontroller,conf.carrier.frequency);         

% generate incumbents
paramIncumbent.incumbent = conf.incumbent;
paramIncumbent.PHY       = conf.PHY;

for nn = 1:conf.deployment.numOfIncumbents
    incumb(nn) = incumbent_Cls(nn,paramIncumbent,areaLimVector);                 
end

netOperatorEventGen = networkOperator_eventGenerator_Cls(conf.deployment.numOfNetworkOperators,conf.traffic.lam_newDem)  ;

% initialize database
database_var.initializeDataBase(incumb,netOperatorEventGen);
LSA_controller.initializeLSAcontroller(incumb,netOperatorEventGen)

for nn = 1:conf.deployment.numOfIncumbents

    eventQueue(nn) =  eventSLS_Cls('incumbent',incumb(nn).activityCnt,'active',nn);
    incumb(nn).initialize(conf.incumbent.radius(nn),database_var,eventQueue(nn));
    
end

eventQueue(conf.deployment.numOfIncumbents+1) =  eventSLS_Cls('operator',netOperatorEventGen.newDemandCnt,'new_demand',1);



%% initialize network generator events
netOperatorEventGen.initialize(eventQueue(conf.deployment.numOfIncumbents+1),[cls.networkOP_ID],conf.database.numOfLSAChannels);

tmpSave = zeros(2,conf.general.simulatedTime );
pointNext = 1;

%% initialize queue to store results

[ ev_ty, ev_ti, ev_ac, ev_ID ] = getAndSetNextEvent(eventQueue);
nextEvent  = eventSLS_Cls(ev_ty, ev_ti, ev_ac, ev_ID);

% resultsLogQueue     = [];
res.out = 0;
res.SINR_vec = 0;
res.SNR_vec = 0;
res.detection.activeBSs_idx = 0;
res.detection.detectedBSs_idx = 0;
nextLogElement      = 0;



%% running event handler

while ~nextEvent.isEmpty() && nextEvent.time < conf.general.simulatedTime 

    
    typeOfEvent = [nextEvent.type '_' nextEvent.activity];
    
%     str1 = [incumb(1).activityState ' ' incumb(2).activityState];
%     str2 = [num2str(incumb(1).activityCnt) ' ' num2str(incumb(2).activityCnt)];
%     disp( ['Current - ' str1]);
%     disp( ['Current - ' str2]);
    
    
    switch typeOfEvent
        
        case 'incumbent_active'    
            
            incumb(ev_ID).update();
            database_var.updateDatabase();
            [cellsPerCarrier, opPerLSAchannel] = LSA_controller.runL1_algorithm([cls.complexPosition],[cls.orientation],conf.cellType.height(1),...
                conf.antenna,conf.carrier.cellType.antennaGain(:,1).',[carrierArray.electricalDowntilt],...
                conf.carrier.cellType.maxTxPw(:,1).' ,cellsPerCarrier,conf.database.numOfLSAChannels,nextEvent.time);
            cellsPerCarrier_no_misbehaviour = cellsPerCarrier;
            if nextLogElement > 0
                resultsLogQueue(nextLogElement).setFinishingTime(nextEvent.time-1);
            end
%             cellsPerCarrier = performMisbehaviour(conf,netOperatorEventGen,cellsPerCarrier,opPerLSAchannel);   
            cellsPerCarrier = performMisbehaviour(conf,netOperatorEventGen,cellsPerCarrier,opPerLSAchannel);   
%             out = runSnapshotSimulation(conf,carrierArray,cellTypeArray,cls,cellsPerCarrier,carrierTypeArray,numOfCarriers);
            out = runSnapshotSimulationQuick(conf,cellsPerCarrier,netOperatorEventGen);
            %%% 
            % detectMisbehaviour here
            idx_TX_BS = cellsPerCarrier( 3,netOperatorEventGen.cell_idx_per_NO(opPerLSAchannel).list) ;
            idx_enabled_BSs = cellsPerCarrier_no_misbehaviour( 3,netOperatorEventGen.cell_idx_per_NO(opPerLSAchannel).list );
            N_enabled_BSs = sum( idx_enabled_BSs );
            
            Est_Loc_active_BS = [ 10 21 40];           
            Est_Loc_active_BS = [ ];           
            %%%% ONLY FOR MISHBEHAVIOUR DETECTION (START)
%             posInc = compute_incunbent_positions( 5,areaLimVector);                    
%             [Est_Loc_active_BS, Pd_table, Pfa_table, Est_energy_active_BS, MT] = Core_function_correct( N_enabled_BSs ,...
%                 conf.detection.num_of_sensors, [cls(1:57).complexPosition], posInc, find(idx_TX_BS),nextLogElement);
            %%%% ONLY FOR MISHBEHAVIOUR DETECTION (END)
            
%             [Est_Loc_active_BS, Pd_table, Pfa_table, Est_energy_active_BS, MT] = Core_function( N_enabled_BSs ,...
%                 conf.detection.num_of_sensors, [cls(1:57).complexPosition], incumb(1).position, find(idx_TX_BS));
            
            %%%% INSTEAD OF MISHBEHAVIOUR DETECTION (START)
            Est_Loc_active_BS = [];
            Pd_table  = 1;
            Pfa_table = 1;
            %%%% INSTEAD OF MISHBEHAVIOUR DETECTION (END)
%             
            % log the detected misbehaviour
            LSA_controller.logMisbehaviour(Est_Loc_active_BS,idx_enabled_BSs,Pfa_table,Pfa_table);
            n_cells_per_operator = cellTypeArray(1).numOfCellsPerOperator;
            [SINR_incumbent, SNR_incumbent] = incumb(ev_ID).computeSINR([cls(1:n_cells_per_operator).complexPosition],[cls(1:n_cells_per_operator).orientation],conf.cellType.height(1),...
                conf.antenna,conf.carrier.cellType.antennaGain(:,1).',[carrierArray.electricalDowntilt],...
                conf.carrier.cellType.maxTxPw(:,1).', idx_enabled_BSs);

%             [ estimated_TX_BS_idx, P_d, P_fa, estimated_TX_pow ] = detectMisbehaviour( N_enabled_BSs ,...
%                 conf.detection.num_of_sensors, [cls(1:n_cells_per_operator).cls.complexPosition], incumb(1).position, idx_TX_BS);
%             resultsLogQueue(nextLogElement) = snapshotResultsLog_Cls(nextEvent.time);         
%             resultsLogQueue(nextLogElement).logData(out);
            nextLogElement = nextLogElement + 1;
            res.out = out;
            res.SINR_vec = SINR_incumbent;
            res.SNR_vec = SNR_incumbent;
            res.detection.activeBSs_idx = find(idx_TX_BS);
            res.detection.detectedBSs_idx = Est_Loc_active_BS;
            
            resultsLogQueue(nextLogElement) = snapshotResultsLog_Cls(nextEvent.time,res); 

            tmpSave(:,pointNext) = [abs(incumb(1).position); N_enabled_BSs];
            pointNext = pointNext +1;
            
        case 'incumbent_inactive'    
            
            incumb(ev_ID).update();            
            database_var.updateDatabase();
            % run L1 algorithm
            [cellsPerCarrier, opPerLSAchannel] = LSA_controller.runL1_algorithm([cls.complexPosition],[cls.orientation],conf.cellType.height(1),...
                conf.antenna,conf.carrier.cellType.antennaGain(:,1).',[carrierArray.electricalDowntilt],...
                conf.carrier.cellType.maxTxPw(:,1).' ,cellsPerCarrier,conf.database.numOfLSAChannels,nextEvent.time);
            if nextLogElement > 0
                resultsLogQueue(nextLogElement).setFinishingTime(nextEvent.time-1);
            end
%             cellsPerCarrier = performMisbehaviour(conf,netOperatorEventGen,cellsPerCarrier,opPerLSAchannel);
%             out = runSnapshotSimulation(conf,carrierArray,cellTypeArray,cls,cellsPerCarrier,carrierTypeArray,numOfCarriers);
            out = runSnapshotSimulationQuick(conf,cellsPerCarrier,netOperatorEventGen);
            res.out = out;
            res.SINR_vec = 0;
            res.SNR_vec = 0;
            res.detection.activeBSs_idx = 0;
            res.detection.detectedBSs_idx = 0;
%             resultsLogQueue(nextLogElement) = snapshotResultsLog_Cls(nextEvent.time);         
%             resultsLogQueue(nextLogElement).logData(out);

            nextLogElement = nextLogElement + 1;
            resultsLogQueue(nextLogElement) = snapshotResultsLog_Cls(nextEvent.time,res);         

            
         case 'operator_new_demand'
            
            % update operator new demand event
            [cellsPerCarrier, opPerLSAchannel] = LSA_controller.runL1_algorithm([cls.complexPosition],[cls.orientation],conf.cellType.height(1),...
                conf.antenna,conf.carrier.cellType.antennaGain(:,1).',[carrierArray.electricalDowntilt],...
                conf.carrier.cellType.maxTxPw(:,1).' ,cellsPerCarrier,conf.database.numOfLSAChannels,nextEvent.time);
            if nextLogElement > 0
                resultsLogQueue(nextLogElement).setFinishingTime(nextEvent.time-1);
            end
%             cellsPerCarrier = performMisbehaviour(conf,netOperatorEventGen,cellsPerCarrier);
            out = runSnapshotSimulationQuick(conf,cellsPerCarrier,netOperatorEventGen);
            res.out = out;
            res.SINR_vec = 0;
            res.SNR_vec = 0;
            res.detection.activeBSs_idx = 0;
            res.detection.detectedBSs_idx = 0;
%             out = runSnapshotSimulation(conf,carrierArray,cellTypeArray,cls,cellsPerCarrier,carrierTypeArray,numOfCarriers);
            nextLogElement = nextLogElement + 1;
            resultsLogQueue(nextLogElement) = snapshotResultsLog_Cls(nextEvent.time,res);  
%             netOperatorEventGen.update();
            
%         case 'operator_change_users'

        otherwise
            
            disp('stop')
%     
%             % update operator user event
%             % run simulator
            
    end
    
%     str1 = [incumb(1).activityState ' ' incumb(2).activityState];
%     str2 = [num2str(incumb(1).activityCnt) ' ' num2str(incumb(2).activityCnt)];
%     disp( ['Updates - ' str1]);
%     disp( ['Updates - ' str2]);
%     pause(1);


    [ ev_ty, ev_ti, ev_ac, ev_ID ] = getAndSetNextEvent(eventQueue);
    nextEvent.setProperties(ev_ty,ev_ti,ev_ac,ev_ID);  
    nextEvent
    disp('------');
    
end



disp('end')

% % % carrierTypeArray = carrierCellTypeArray;
% % % type2TypeArray = cellType2cellTypeArray;
% % % 
% % % % function mainSim_v2(conf,carrierArray,cellTypeArray,carrierTypeArray,...
% % % %         type2TypeArray)
% % % % 
% % % %     global macroInd;
% % % %     global picoInd;
% % %     
% % % %     varSaveVars = 1;
% % % %     
% % % %     if varSaveVars  == 1
% % % %         varfnamevars = 'lsaSimulatorVars';
% % % %     end
% % % %     
% % % numOfCarriers = conf.general.numOfCarriers;
% % % isEiRP = 0;
% % % %%% Simulator profiling
% % % if conf.results.profiling
% % %     profile on;
% % % end
% % % 
% % % %random generators
% % % seedFileName = strcat(conf.storage.inputFolderPath,conf.storage.seedFileName);
% % % seedNumber = getSeedNumber(conf.randomness.randGeneratorState,isEiRP,...
% % %     seedFileName);
% % % RandStream.setGlobalStream(RandStream('mt19937ar','seed',seedNumber));

%     if varSaveVars  == 1
%         save(varfnamevars,'seedNumber');
%     end
%     

